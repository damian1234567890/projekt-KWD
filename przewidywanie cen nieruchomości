from sklearn.datasets import load_boston 

  

housing_data_data = load_boston() 

print(housing_data_data['DESCR']) 

print(housing_data_data.data[1,:]) 

from sklearn.preprocessing import StandardScaler 

scaler = StandardScaler() 

housing_data_data['data'] = scaler.fit_transform(housing_data_data['data']) 

print(housing_data_data.data[1,:]) 

import pandas as pd 

housing_p = pd.DataFrame(housing_data_data.data, columns=[housing_data_data.feature_names]) 

housing_p.head() 

housing_p.describe() 

%matplotlib inline 

import matplotlib.pyplot as plt 

import seaborn as sb 

  

plot = sb.pairplot(housing_p, diag_kind="kde") 

from sklearn.model_selection import train_test_split 

  

housing_train, housing_test, housing_train_target, housing_test_target  =  \ 

train_test_split(housing_data_data.data, housing_data_data.target, test_size=0.1, random_state=1010) 

print(housing_train.shape) 

print(housing_test.shape) 

print(housing_train_target.shape) 

print(housing_test_target.shape) 

from sklearn.linear_model import LinearRegression 

  

linear_regression = LinearRegression() 

linear_regression.fit(housing_train, housing_train_target) 

from sklearn.metrics import mean_squared_error 

from sklearn.metrics import r2_score 

print("Błąd średniokwadratowy: %.2f" %  

      mean_squared_error(housing_test_target, linear_regression.predict(housing_test))) 

print('Wariancja: %.2f' % r2_score(housing_test_target, linear_regression.predict(housing_test))) 

id=2 

linear_regression_prediction = linear_regression.predict(housing_test[id,:].reshape(1,-1)) 

print("Wartość przwidziana przez model dla id {0} wynosi {1}".format(id, linear_regression_prediction)) 

print("Rzeczywista wartość dla id {0} wynosi {1}".format(id, housing_test_target[id])) 

id=7 

linear_regression_prediction = linear_regression.predict(housing_test[id,:].reshape(1,-1)) 

print("Wartość przwidziana przez model dla id {0} wynosi {1}".format(id, linear_regression_prediction)) 

print("Rzeczywista wartość dla id {0} wynosi {1}".format(id, housing_test_target[id])) 

id=17 

linear_regression_prediction = linear_regression.predict(housing_test[id,:].reshape(1,-1)) 

print("Wartość przwidziana przez model dla id {0} wynosi {1}".format(id, linear_regression_prediction)) 

print("Rzeczywista wartość  dla id {0} wynosi {1}".format(id, housing_test_target[id])) 

from sklearn.preprocessing import PolynomialFeatures 

  

pt = PolynomialFeatures(2, ) 

housing_train_poly = pt.fit_transform(housing_train) 

housing_train_poly.shape 

housig_test_poly = pt.fit_transform(housing_test) 

lr_poly = LinearRegression(normalize=True) 

lr_poly.fit(housing_train_poly, housing_train_target) 

housing_test_poly = pt.fit_transform(housing_test) 

print("Błąd średniokwadratowy modelu z wielomianowymi cechami: %.2f" %  

      mean_squared_error(housing_test_target, lr_poly.predict(housing_test_poly))) 

score = lr_poly.score(housing_test_poly, housing_test_target) 

print("Wariancja modelu z wielomianowymi cechami: %.2f" % score) 

id=2 

linear_regression_prediction = lr_poly.predict(housing_test_poly[id,:].reshape(1,-1)) 

print("Wartość przwidziana przez model dla id {0} wynosi {1}".format(id, linear_regression_prediction)) 

print("Rzeczywista wartość dla id {0} wynosi {1}".format(id, housing_test_target[id])) 

id=7 

linear_regression_prediction = lr_poly.predict(housing_test_poly[id,:].reshape(1,-1)) 

print("Wartość przwidziana przez model dla id {0} wynosi {1}".format(id, linear_regression_prediction)) 

print("Rzeczywista wartość dla id {0} wynosi {1}".format(id, housing_test_target[id])) 

id=17 

linear_regression_prediction = lr_poly.predict(housing_test_poly[id,:].reshape(1,-1)) 

print("Wartość przwidziana przez model dla id {0} wynosi {1}".format(id, linear_regression_prediction)) 

print("Rzeczywista wartość dla id {0} wynosi {1}".format(id, housing_test_target[id])) 

from sklearn.feature_selection import RFE 

  

sel_ = RFE(estimator=LinearRegression(normalize=False), n_features_to_select=60) 

sel_.fit(housing_train_poly, housing_train_target) 

  

print(sel_.support_) 

print(sel_.ranking_) 

print("Błąd średniokwadratowy modelu z wybranymi cechami wielomianowymi: %.2f" %  

      mean_squared_error(housing_test_target, sel_.predict(housing_test_poly))) 

score = sel_.score(housing_test_poly, housing_test_target) #r2_score 

print("Wariancja modelu z wybranymi cechami wielomianowymi: %.2f" % score) 

id=2 

linear_regression_prediction = sel_.predict(housing_test_poly[id,:].reshape(1,-1)) 

print("Wartość przwidziana przez model dla id {0} wynosi {1}".format(id, linear_regression_prediction)) 

print("Rzeczywista wartość dla id {0} wynosi {1}".format(id, housing_test_target[id])) 

id=7 

linear_regression_prediction = sel_.predict(housing_test_poly[id,:].reshape(1,-1)) 

print("Wartość przwidziana przez model dla id {0} wynosi {1}".format(id, linear_regression_prediction)) 

print("Rzeczywista wartość dla id {0} wynosi {1}".format(id, housing_test_target[id])) 

id=17 

linear_regression_prediction = sel_.predict(housing_test_poly[id,:].reshape(1,-1)) 

print("Wartość przwidziana przez model dla id {0} wynosi {1}".format(id, linear_regression_prediction)) 

print("Rzeczywista wartość dla id {0} wynosi {1}".format(id, housing_test_target[id])) 

sel_ = RFE(estimator=LinearRegression(normalize=False), n_features_to_select=100) 

sel_.fit(housing_train_poly, housing_train_target) 

  

print(sel_.support_) 

print(sel_.ranking_) 

print("Błąd średniokwadratowy modelu z wybranymi cechami wielomianowymi: %.2f" %  

      mean_squared_error(housing_test_target, sel_.predict(housing_test_poly))) 

score = sel_.score(housing_test_poly, housing_test_target) 

print("Wariancja modelu z wybranymi cechami wielomianowymi: %.2f" % score) 

sel_ = RFE(estimator=LinearRegression(normalize=False), n_features_to_select=30) 

sel_.fit(housing_train_poly, housing_train_target) 

  

print(sel_.support_) 

print(sel_.ranking_) 

from sklearn.linear_model import Lasso 

  

lasso_r = Lasso(alpha=0.5, max_iter=5000,) 

lasso_r.fit(housing_train_poly, housing_train_target) 

  

print("Błąd średniokwadratowy modelu z lassem: %.2f" %  

      mean_squared_error(housing_test_target, lr_poly.predict(housing_test_poly))) 

score = lasso_r.score(housing_test_poly, housing_test_target) 

print("Wariancja modelu z lassem: %.2f" % score) 

from sklearn.linear_model import Lasso 

  

lasso_r = Lasso(alpha=0.8, max_iter=5000,) 

lasso_r.fit(housing_train_poly, housing_train_target) 

  

print("Błąd średniokwadratowy modelu z lassem: %.2f" %  

      mean_squared_error(housing_test_target, lr_poly.predict(housing_test_poly))) 

score = lasso_r.score(housing_test_poly, housing_test_target) 

print("Wariancja modelu z lassem: %.2f" % score) 

from sklearn.linear_model import Lasso 

  

lasso_r = Lasso(alpha=0.2, max_iter=5000,) 

lasso_r.fit(housing_train_poly, housing_train_target) 

  

print("Błąd średniokwadratowy modelu z lassem: %.2f" %  

      mean_squared_error(housing_test_target, lr_poly.predict(housing_test_poly))) 

score = lasso_r.score(housing_test_poly, housing_test_target) 

print("Wariancja modelu z lassem: %.2f" % score) 

id=2 

linear_regression_prediction = lasso_r.predict(housing_test_poly[id,:].reshape(1,-1)) 

print("Wartość przwidziana przez model dla id {0} wynosi {1}".format(id, linear_regression_prediction)) 

print("Rzeczywista wartość dla id {0} wynosi {1}".format(id, housing_test_target[id])) 

id=7 

linear_regression_prediction = lasso_r.predict(housing_test_poly[id,:].reshape(1,-1)) 

print("Wartość przwidziana przez model dla id {0} wynosi {1}".format(id, linear_regression_prediction)) 

print("Rzeczywista wartość dla id {0} wynosi {1}".format(id, housing_test_target[id])) 

id=17 

linear_regression_prediction = lasso_r.predict(housing_test_poly[id,:].reshape(1,-1)) 

print("Wartość przwidziana przez model dla id {0} wynosi {1}".format(id, linear_regression_prediction)) 

print("Rzeczywista wartość dla id {0} wynosi {1}".format(id, housing_test_target[id])) 

from sklearn.model_selection import cross_val_score 

scores = cross_val_score(LinearRegression(), housing_data_data['data'], housing_data_data['target'], cv=5) 

print(scores.mean()) 

print(scores.std()) 

print(scores) 
